{
  "openapi": "3.0.1",
  "info": {
    "title": "Modern programming technologies lab docs",
    "description": "This is a RESTful service using springdoc-openapi and OpenAPI 3.0"
  },
  "servers": [
    {
      "url": "http://localhost:8081",
      "description": "Generated server url"
    }
  ],
  "tags": [
    {
      "name": "vehicles",
      "description": "the Vehicle API"
    },
    {
      "name": "routes",
      "description": "the Route API"
    }
  ],
  "paths": {
    "/api/v1/routes/{id}": {
      "get": {
        "tags": [
          "routes"
        ],
        "summary": "Finds an route by id",
        "operationId": "getRouteById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "Route not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Route"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Route"
                }
              }
            }
          },
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Route"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Route"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "routes"
        ],
        "summary": "Updates an existing route",
        "operationId": "updateRoute",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RouteDto"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/RouteDto"
              }
            }
          }
        },
        "responses": {
          "400": {
            "description": "Invalid input",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Route"
                }
              }
            }
          },
          "200": {
            "description": "Route updated",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Route"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "routes"
        ],
        "summary": "Deletes an route",
        "operationId": "deleteRoute",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "Route not found"
          },
          "204": {
            "description": "successful operation"
          }
        }
      }
    },
    "/api/v1/routes": {
      "get": {
        "tags": [
          "routes"
        ],
        "summary": "Gets all routes",
        "operationId": "getAllRoutes",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Route"
                  }
                }
              },
              "application/xml": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Route"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "routes"
        ],
        "summary": "Creates a new route",
        "operationId": "createRoute",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RouteDto"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/RouteDto"
              }
            }
          }
        },
        "responses": {
          "400": {
            "description": "Invalid input",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Route"
                }
              }
            }
          },
          "201": {
            "description": "Vehicle created",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Route"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/vehicles/{id}": {
      "get": {
        "tags": [
          "vehicles"
        ],
        "summary": "Finds an vehicle by id",
        "operationId": "getVehicleById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "Vehicle not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Vehicle"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Vehicle"
                }
              }
            }
          },
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Vehicle"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Vehicle"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "vehicles"
        ],
        "summary": "Updates an existing vehicle",
        "operationId": "updateVehicle",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EditVehicleDto"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/EditVehicleDto"
              }
            }
          }
        },
        "responses": {
          "400": {
            "description": "Invalid input",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Vehicle"
                }
              }
            }
          },
          "200": {
            "description": "Vehicle updated",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Vehicle"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "vehicles"
        ],
        "summary": "Deletes an vehicle",
        "operationId": "deleteVehicle",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "Vehicle not found"
          },
          "204": {
            "description": "successful operation"
          }
        }
      }
    },
    "/api/v1/vehicles": {
      "get": {
        "tags": [
          "vehicles"
        ],
        "summary": "Gets all vehicles",
        "operationId": "getAllVehicles",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Vehicle"
                  }
                }
              },
              "application/xml": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Vehicle"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "vehicles"
        ],
        "summary": "Creates a new vehicle",
        "operationId": "createVehicle",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddVehicleDto"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/AddVehicleDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Vehicle created",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Vehicle"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Vehicle"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "RouteDto": {
        "required": [
          "description",
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 200,
            "minLength": 0,
            "type": "string"
          },
          "description": {
            "maxLength": 200,
            "minLength": 0,
            "type": "string"
          }
        }
      },
      "Route": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "name": {
            "maxLength": 200,
            "minLength": 0,
            "type": "string"
          },
          "description": {
            "maxLength": 200,
            "minLength": 0,
            "type": "string"
          }
        }
      },
      "Vehicle": {
        "required": [
          "releaseYear",
          "route",
          "type"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "type": {
            "maxLength": 32,
            "minLength": 0,
            "type": "string"
          },
          "model": {
            "maxLength": 32,
            "minLength": 0,
            "type": "string"
          },
          "releaseYear": {
            "type": "integer",
            "format": "int32"
          },
          "route": {
            "$ref": "#/components/schemas/Route"
          }
        }
      },
      "AddVehicleDto": {
        "required": [
          "releaseYear",
          "route",
          "type"
        ],
        "type": "object",
        "properties": {
          "type": {
            "maxLength": 32,
            "minLength": 0,
            "type": "string"
          },
          "route": {
            "type": "string"
          },
          "releaseYear": {
            "type": "integer",
            "format": "int32"
          },
          "model": {
            "maxLength": 200,
            "minLength": 0,
            "type": "string"
          }
        }
      },
      "EditVehicleDto": {
        "required": [
          "type"
        ],
        "type": "object",
        "properties": {
          "type": {
            "maxLength": 32,
            "minLength": 0,
            "type": "string"
          },
          "model": {
            "maxLength": 200,
            "minLength": 0,
            "type": "string"
          }
        }
      }
    }
  }
}