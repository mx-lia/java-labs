package com.khramykh.beans;import com.khramykh.dao.classes.CardModel;import com.khramykh.model.Card;import com.khramykh.model.CurrentUser;import com.khramykh.model.User;import javax.faces.application.FacesMessage;import javax.faces.bean.ManagedBean;import javax.faces.bean.RequestScoped;import javax.faces.context.FacesContext;import java.math.BigDecimal;import java.sql.Date;import java.util.List;@ManagedBean(name = "cardBean")@RequestScopedpublic class CardBean {    private CardModel cardModel;    private double payment;    private User user;    private Card card;    private Card newCard;    private Card selectedCard;    private String dateString;    private List<Card> cards;    public CardBean() throws ClassNotFoundException {        cardModel = new CardModel();        user = CurrentUser.getUser();        card = CurrentUser.getCard();        card.setUser(user);        newCard = new Card();        cards = cardModel.findAll();    }    public void pay(){        if(payment <= selectedCard.getBalance().doubleValue() && selectedCard.getBalance().doubleValue() > 0){            selectedCard.setBalance(BigDecimal.valueOf(selectedCard.getBalance().doubleValue() - payment));            cardModel.pay(selectedCard);            FacesContext.getCurrentInstance().addMessage("infoCard", new FacesMessage(FacesMessage.SEVERITY_INFO, selectedCard.getNumber(), "Pay has been successfully"));        } else{            FacesContext.getCurrentInstance().addMessage("infoCard", new FacesMessage(FacesMessage.SEVERITY_FATAL, selectedCard.getNumber(), "Pay was terminated"));        }    }    public void addCard() {        newCard.setUser(CurrentUser.user);        cardModel.addCard(newCard);        if (!cards.contains(newCard)) {            cards.add(newCard);        } else {            return;        }    }    public double getPayment() {        return payment;    }    public void setPayment(double payment) {        this.payment = payment;    }    public Card getCard() {        return card;    }    public void setCard(Card card) {        this.card = card;    }    public Card getNewCard() {        return newCard;    }    public void setNewCard(Card newCard) {        this.newCard = newCard;    }    public List<Card> getCards() {        return cards;    }    public void setCards(List<Card> cards) {        this.cards = cards;    }    public Card getSelectedCard() {        return selectedCard;    }    public void setSelectedCard(Card selectedCard) {        this.selectedCard = selectedCard;    }    public String getDateString() {        return dateString;    }    public void setDateString(String dateString) {        this.dateString = dateString;        newCard.setValidDate(Date.valueOf(dateString));    }}